/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2015 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
{"version":3,"file":"sanitizeHtml.js","sources":["Core/defined.js","Core/DeveloperError.js","Core/deprecationWarning.js","Core/RuntimeError.js","Core/freezeObject.js","Core/defaultValue.js","Core/formatError.js","Workers/createTaskProcessorWorker.js","Workers/sanitizeHtml.js"],"names":[],"mappings":"CAAA,WAEA,OAAA,kBAAA,WACA,YAcA,IAAA,GAAA,SAAA,GACA,MAAA,UAAA,EAGA,OAAA,KCnBA,OAAA,uBACA,aACA,SACA,GACA,YAmBA,IAAA,GAAA,SAAA,GAMA,KAAA,KAAA,iBAOA,KAAA,QAAA,CAGA,IAAA,EACA,KACA,KAAA,IAAA,OACA,MAAA,GACA,EAAA,EAAA,MAQA,KAAA,MAAA,EAoBA,OAjBA,GAAA,UAAA,SAAA,WACA,GAAA,GAAA,KAAA,KAAA,KAAA,KAAA,OAMA,OAJA,GAAA,KAAA,SACA,GAAA,KAAA,KAAA,MAAA,YAGA,GAMA,EAAA,wBAAA,WACA,KAAA,IAAA,GAAA,0EAGA,ICvEA,OAAA,2BACA,YACA,oBACA,SACA,EACA,GACA,YAEA,IAAA,MAyCA,EAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,EAAA,GACA,KAAA,IAAA,GAAA,uCAGA,GAAA,EAAA,MACA,EAAA,IAAA,EACA,QAAA,IAAA,IAIA,OAAA,KC9DA,ODiEA,qBChEA,aACA,SACA,GACA,YAkBA,IAAA,GAAA,SAAA,GAMA,KAAA,KAAA,eAOA,KAAA,QAAA,CAGA,IAAA,EACA,KACA,KAAA,IAAA,OACA,MAAA,GACA,EAAA,EAAA,MAQA,KAAA,MAAA,EAaA,OAVA,GAAA,UAAA,SAAA,WACA,GAAA,GAAA,KAAA,KAAA,KAAA,KAAA,OAMA,OAJA,GAAA,KAAA,SACA,GAAA,KAAA,KAAA,MAAA,YAGA,GAGA,IC/DA,OAAA,qBACA,aACA,SACA,GACA,YAWA,IAAA,GAAA,OAAA,MAOA,OANA,GAAA,KACA,EAAA,SAAA,GACA,MAAA,KAIA,ICtBA,ODyBA,qBCxBA,kBACA,SACA,GACA,YAWA,IAAA,GAAA,SAAA,EAAA,GACA,MAAA,UAAA,EACA,EAEA,EASA,OAFA,GAAA,aAAA,MAEA,IC5BA,OAAA,oBACA,aACA,SACA,GACA,YAWA,IAAA,GAAA,SAAA,GACA,GAAA,GAEA,EAAA,EAAA,KACA,EAAA,EAAA,OAEA,GADA,EAAA,IAAA,EAAA,GACA,EAAA,KAAA,EAEA,EAAA,UAGA,IAAA,GAAA,EAAA,KAKA,OAJA,GAAA,KACA,GAAA,KAAA,GAGA,EAGA,OAAA,KAGA,OCrCA,qCACA,uBACA,kBACA,uBACA,SACA,EACA,EACA,GACA,YA0BA,IAAA,GAAA,SAAA,GACA,GAAA,GACA,KACA,GACA,GAAA,OACA,OAAA,OACA,MAAA,OAGA,OAAA,UAAA,GAEA,GAAA,GAAA,EAAA,IAEA,GAAA,OAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,MAAA,OACA,EAAA,OAAA,MAEA,KACA,EAAA,OAAA,EAAA,EAAA,WAAA,GACA,MAAA,GAGA,EAAA,MAFA,YAAA,QAGA,KAAA,EAAA,KACA,QAAA,EAAA,QACA,MAAA,EAAA,OAGA,EAIA,EAAA,KACA,EAAA,EAAA,KAAA,kBAAA,KAAA,cAGA,EAAA,yBACA,EAAA,OAAA,EAGA,KACA,EAAA,EAAA,GACA,MAAA,GAGA,EAAA,OAAA,OACA,EAAA,MAAA,kCAAA,EAAA,GAAA,6BAAA,KAAA,UAAA,GACA,EAAA,KAoCA,OAAA,KCtHA,OAAA,wBACA,kBACA,6BACA,uBACA,+BACA,SACA,EACA,EACA,EACA,GACA,YAEA,IACA,GADA,EAAA,0DAYA,EAAA,SAAA,GAGA,GAFA,EAAA,WAAA,gFAEA,EAAA,KAEA,KAAA,UACA,cAAA,GACA,EAAA,OAAA,eAEA,EAAA,IACA,KAAA,IAAA,GAAA,+CAIA,OAAA,GAAA,GAGA,OAAA,GAAA","sourcesContent":["\n/*global define*/\ndefine('Core/defined',[],function() {\n    \"use strict\";\n\n    /**\n     * Returns true if the object is defined, returns false otherwise.\n     *\n     * @exports defined\n     *\n     * @example\n     * if (Cesium.defined(positions)) {\n     *      doSomething();\n     * } else {\n     *      doSomethingElse();\n     * }\n     */\n    var defined = function(value) {\n        return value !== undefined;\n    };\n\n    return defined;\n});\n","\n/*global define*/\ndefine('Core/DeveloperError',[\n        './defined'\n    ], function(\n        defined) {\n    \"use strict\";\n\n    /**\n     * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\n     * argument out of range, etc.  This exception should only be thrown during development;\n     * it usually indicates a bug in the calling code.  This exception should never be\n     * caught; instead the calling code should strive not to generate it.\n     * <br /><br />\n     * On the other hand, a {@link RuntimeError} indicates an exception that may\n     * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\n     * to catch.\n     *\n     * @alias DeveloperError\n     * @constructor\n     *\n     * @param {String} [message] The error message for this exception.\n     *\n     * @see RuntimeError\n     */\n    var DeveloperError = function(message) {\n        /**\n         * 'DeveloperError' indicating that this exception was thrown due to a developer error.\n         * @type {String}\n         * @readonly\n         */\n        this.name = 'DeveloperError';\n\n        /**\n         * The explanation for why this exception was thrown.\n         * @type {String}\n         * @readonly\n         */\n        this.message = message;\n\n        //Browsers such as IE don't have a stack property until you actually throw the error.\n        var stack;\n        try {\n            throw new Error();\n        } catch (e) {\n            stack = e.stack;\n        }\n\n        /**\n         * The stack trace of this exception, if available.\n         * @type {String}\n         * @readonly\n         */\n        this.stack = stack;\n    };\n\n    DeveloperError.prototype.toString = function() {\n        var str = this.name + ': ' + this.message;\n\n        if (defined(this.stack)) {\n            str += '\\n' + this.stack.toString();\n        }\n\n        return str;\n    };\n\n    /**\n     * @private\n     */\n    DeveloperError.throwInstantiationError = function() {\n        throw new DeveloperError('This function defines an interface and should not be called directly.');\n    };\n\n    return DeveloperError;\n});\n","\n/*global define,console*/\ndefine('Core/deprecationWarning',[\n        './defined',\n        './DeveloperError'\n    ], function(\n        defined,\n        DeveloperError) {\n    \"use strict\";\n\n    var warnings = {};\n\n    /**\n     * Logs a deprecation message to the console.  Use this function instead of\n     * <code>console.log</code> directly since this does not log duplicate messages\n     * unless it is called from multiple workers.\n     *\n     * @exports deprecationWarning\n     *\n     * @param {String} identifier The unique identifier for this deprecated API.\n     * @param {String} message The message to log to the console.\n     *\n     * @example\n     * // Deprecated function or class\n     * var Foo = function() {\n     *    deprecationWarning('Foo', 'Foo was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use newFoo instead.');\n     *    // ...\n     * }\n     *\n     * // Deprecated function\n     * Bar.prototype.func = function() {\n     *    deprecationWarning('Bar.func', 'Bar.func() was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newFunc() instead.');\n     *    // ...\n     * };\n     *\n     * // Deprecated property\n     * defineProperties(Bar.prototype, {\n     *     prop : {\n     *         get : function() {\n     *             deprecationWarning('Bar.prop', 'Bar.prop was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newProp instead.');\n     *             // ...\n     *         },\n     *         set : function(value) {\n     *             deprecationWarning('Bar.prop', 'Bar.prop was deprecated in Cesium 1.01.  It will be removed in 1.03.  Use Bar.newProp instead.');\n     *             // ...\n     *         }\n     *     }\n     * });\n     *\n     * @private\n     */\n    var deprecationWarning = function(identifier, message) {\n        //>>includeStart('debug', pragmas.debug);\n        if (!defined(identifier) || !defined(message)) {\n            throw new DeveloperError('identifier and message are required.');\n        }\n        //>>includeEnd('debug');\n\n        if (!defined(warnings[identifier])) {\n            warnings[identifier] = true;\n            console.log(message);\n        }\n    };\n\n    return deprecationWarning;\n});","\n/*global define*/\ndefine('Core/RuntimeError',[\n        './defined'\n    ], function(\n        defined) {\n    \"use strict\";\n\n    /**\n     * Constructs an exception object that is thrown due to an error that can occur at runtime, e.g.,\n     * out of memory, could not compile shader, etc.  If a function may throw this\n     * exception, the calling code should be prepared to catch it.\n     * <br /><br />\n     * On the other hand, a {@link DeveloperError} indicates an exception due\n     * to a developer error, e.g., invalid argument, that usually indicates a bug in the\n     * calling code.\n     *\n     * @alias RuntimeError\n     * @constructor\n     *\n     * @param {String} [message] The error message for this exception.\n     *\n     * @see DeveloperError\n     */\n    var RuntimeError = function(message) {\n        /**\n         * 'RuntimeError' indicating that this exception was thrown due to a runtime error.\n         * @type {String}\n         * @readonly\n         */\n        this.name = 'RuntimeError';\n\n        /**\n         * The explanation for why this exception was thrown.\n         * @type {String}\n         * @readonly\n         */\n        this.message = message;\n\n        //Browsers such as IE don't have a stack property until you actually throw the error.\n        var stack;\n        try {\n            throw new Error();\n        } catch (e) {\n            stack = e.stack;\n        }\n\n        /**\n         * The stack trace of this exception, if available.\n         * @type {String}\n         * @readonly\n         */\n        this.stack = stack;\n    };\n\n    RuntimeError.prototype.toString = function() {\n        var str = this.name + ': ' + this.message;\n\n        if (defined(this.stack)) {\n            str += '\\n' + this.stack.toString();\n        }\n\n        return str;\n    };\n\n    return RuntimeError;\n});\n","\n/*global define*/\ndefine('Core/freezeObject',[\n        './defined'\n    ], function(\n        defined) {\n    \"use strict\";\n\n    /**\n     * Freezes an object, using Object.freeze if available, otherwise returns\n     * the object unchanged.  This function should be used in setup code to prevent\n     * errors from completely halting JavaScript execution in legacy browsers.\n     *\n     * @private\n     *\n     * @exports freezeObject\n     */\n    var freezeObject = Object.freeze;\n    if (!defined(freezeObject)) {\n        freezeObject = function(o) {\n            return o;\n        };\n    }\n\n    return freezeObject;\n});","\n/*global define*/\ndefine('Core/defaultValue',[\n        './freezeObject'\n    ], function(\n        freezeObject) {\n    \"use strict\";\n\n    /**\n     * Returns the first parameter if not undefined, otherwise the second parameter.\n     * Useful for setting a default value for a parameter.\n     *\n     * @exports defaultValue\n     *\n     * @example\n     * param = Cesium.defaultValue(param, 'default');\n     */\n    var defaultValue = function(a, b) {\n        if (a !== undefined) {\n            return a;\n        }\n        return b;\n    };\n\n    /**\n     * A frozen empty object that can be used as the default value for options passed as\n     * an object literal.\n     */\n    defaultValue.EMPTY_OBJECT = freezeObject({});\n\n    return defaultValue;\n});","\n/*global define*/\ndefine('Core/formatError',[\n        './defined'\n    ], function(\n        defined) {\n    \"use strict\";\n\n    /**\n     * Formats an error object into a String.  If available, uses name, message, and stack\n     * properties, otherwise, falls back on toString().\n     *\n     * @exports formatError\n     *\n     * @param {Object} object The item to find in the array.\n     * @returns {String} A string containing the formatted error.\n     */\n    var formatError = function(object) {\n        var result;\n\n        var name = object.name;\n        var message = object.message;\n        if (defined(name) && defined(message)) {\n            result = name + ': ' + message;\n        } else {\n            result = object.toString();\n        }\n\n        var stack = object.stack;\n        if (defined(stack)) {\n            result += '\\n' + stack;\n        }\n\n        return result;\n    };\n\n    return formatError;\n});","\n/*global define*/\ndefine('Workers/createTaskProcessorWorker',[\n        '../Core/defaultValue',\n        '../Core/defined',\n        '../Core/formatError'\n    ], function(\n        defaultValue,\n        defined,\n        formatError) {\n    \"use strict\";\n\n    /**\n     * Creates an adapter function to allow a calculation function to operate as a Web Worker,\n     * paired with TaskProcessor, to receive tasks and return results.\n     *\n     * @exports createTaskProcessorWorker\n     *\n     * @param {createTaskProcessorWorker~WorkerFunction} workerFunction The calculation function,\n     *        which takes parameters and returns a result.\n     * @returns {createTaskProcessorWorker~TaskProcessorWorkerFunction} A function that adapts the\n     *          calculation function to work as a Web Worker onmessage listener with TaskProcessor.\n     *\n     * @see TaskProcessor\n     * @see {@link http://www.w3.org/TR/workers/|Web Workers}\n     * @see {@link http://www.w3.org/TR/html5/common-dom-interfaces.html#transferable-objects|Transferable objects}\n     *\n     * @example\n     * function doCalculation(parameters, transferableObjects) {\n     *   // calculate some result using the inputs in parameters\n     *   return result;\n     * }\n     *\n     * return Cesium.createTaskProcessorWorker(doCalculation);\n     * // the resulting function is compatible with TaskProcessor\n     */\n    var createTaskProcessorWorker = function(workerFunction) {\n        var postMessage;\n        var transferableObjects = [];\n        var responseMessage = {\n            id : undefined,\n            result : undefined,\n            error : undefined\n        };\n\n        return function(event) {\n            /*global self*/\n            var data = event.data;\n\n            transferableObjects.length = 0;\n            responseMessage.id = data.id;\n            responseMessage.error = undefined;\n            responseMessage.result = undefined;\n\n            try {\n                responseMessage.result = workerFunction(data.parameters, transferableObjects);\n            } catch (e) {\n                if (e instanceof Error) {\n                    // Errors can't be posted in a message, copy the properties\n                    responseMessage.error = {\n                        name : e.name,\n                        message : e.message,\n                        stack : e.stack\n                    };\n                } else {\n                    responseMessage.error = e;\n                }\n            }\n\n            if (!defined(postMessage)) {\n                postMessage = defaultValue(self.webkitPostMessage, self.postMessage);\n            }\n\n            if (!data.canTransferArrayBuffer) {\n                transferableObjects.length = 0;\n            }\n\n            try {\n                postMessage(responseMessage, transferableObjects);\n            } catch (e) {\n                // something went wrong trying to post the message, post a simpler\n                // error that we can be sure will be cloneable\n                responseMessage.result = undefined;\n                responseMessage.error = 'postMessage failed with error: ' + formatError(e) + '\\n  with responseMessage: ' + JSON.stringify(responseMessage);\n                postMessage(responseMessage);\n            }\n        };\n    };\n\n    /**\n     * A function that performs a calculation in a Web Worker.\n     * @callback createTaskProcessorWorker~WorkerFunction\n     *\n     * @param {Object} parameters Parameters to the calculation.\n     * @param {Array} transferableObjects An array that should be filled with references to objects inside\n     *        the result that should be transferred back to the main document instead of copied.\n     * @returns {Object} The result of the calculation.\n     *\n     * @example\n     * function calculate(parameters, transferableObjects) {\n     *   // perform whatever calculation is necessary.\n     *   var typedArray = new Float32Array();\n     *\n     *   // typed arrays are transferable\n     *   transferableObjects.push(typedArray)\n     *\n     *   return {\n     *      typedArray : typedArray\n     *   };\n     * }\n     */\n\n    /**\n     * A Web Worker message event handler function that handles the interaction with TaskProcessor,\n     * specifically, task ID management and posting a response message containing the result.\n     * @callback createTaskProcessorWorker~TaskProcessorWorkerFunction\n     *\n     * @param {Object} event The onmessage event object.\n     */\n\n    return createTaskProcessorWorker;\n});","\n/*global define*/\ndefine('Workers/sanitizeHtml',[\n        '../Core/defined',\n        '../Core/deprecationWarning',\n        '../Core/RuntimeError',\n        './createTaskProcessorWorker'\n    ], function(\n        defined,\n        deprecationWarning,\n        RuntimeError,\n        createTaskProcessorWorker) {\n    \"use strict\";\n\n    var cajaScript = 'https://caja.appspot.com/html-css-sanitizer-minified.js';\n    var html_sanitize;\n\n    /**\n     * A worker that loads the Google Caja HTML & CSS sanitizer and sanitizes the\n     * provided HTML string.\n     *\n     * @exports sanitize\n     *\n     * @see TaskProcessor\n     * @see {@link http://www.w3.org/TR/workers/|Web Workers}\n     */\n    var sanitizeHtml = function(html) {\n        deprecationWarning('sanitize', 'The sanitize worker has been deprecated and will be removed in Cesium 1.10.');\n\n        if (!defined(html_sanitize)) {\n            /*global self,importScripts*/\n            self.window = {};\n            importScripts(cajaScript); // importScripts is synchronous\n            html_sanitize = window.html_sanitize;\n\n            if (!defined(html_sanitize)) {\n                throw new RuntimeError('Unable to load Google Caja sanitizer script.');\n            }\n        }\n\n        return html_sanitize(html);\n    };\n\n    return createTaskProcessorWorker(sanitizeHtml);\n});\n"]}