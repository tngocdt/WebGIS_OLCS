import OLStyleIcon from 'ol/style/Icon.js';
import VectorSource, {} from 'ol/source/Vector.js';
import OLClusterSource from 'ol/source/Cluster.js';
import { circular as olCreateCircularPolygon } from 'ol/geom/Polygon.js';
import { boundingExtent, getCenter } from 'ol/extent.js';
import olGeomSimpleGeometry from 'ol/geom/SimpleGeometry.js';
import { convertColorToCesium, olGeometryCloneTo4326, ol4326CoordinateToCesiumCartesian, ol4326CoordinateArrayToCsCartesians } from './core.js';
import VectorLayerCounterpart, {} from './core/VectorLayerCounterpart.js';
import { getUid, waitReady } from './util.js';
import {} from 'ol/style/Style.js';
import { Geometry as OLGeometry } from 'ol/geom.js';
export default class FeatureConverter {
    scene;
    /**
     * Bind once to have a unique function for using as a listener
     */
    boundOnRemoveOrClearFeatureListener_ = this.onRemoveOrClearFeature_.bind(this);
    defaultBillboardEyeOffset_ = new Cesium.Cartesian3(0, 0, 10);
    /**
     * Concrete base class for converting from OpenLayers3 vectors to Cesium
     * primitives.
     * Extending this class is possible provided that the extending class and
     * the library are compiled together by the closure compiler.
     * @param scene Cesium scene.
     * @api
     */
    constructor(scene) {
        this.scene = scene;
        this.scene = scene;
    }
    /**
     * @param evt
     */
    onRemoveOrClearFeature_(evt) {
        const source = evt.target;
        console.assert(source instanceof VectorSource);
        const cancellers = source['olcs_cancellers'];
        if (cancellers) {
            const feature = evt.feature;
            if (feature) {
                // remove
                const id = getUid(feature);
                const canceller = cancellers[id];
                if (canceller) {
                    canceller();
                    delete cancellers[id];
                }
            }
            else {
                // clear
                for (const key in cancellers) {
                    if (cancellers.hasOwnProperty(key)) {
                        cancellers[key]();
                    }
                }
                source['olcs_cancellers'] = {};
            }
        }
    }
    /**
     * @param layer
     * @param feature OpenLayers feature.
     * @param primitive
     */
    setReferenceForPicking(layer, feature, primitive) {
        primitive.olLayer = layer;
        primitive.olFeature = feature;
    }
    /**
     * Basics primitive creation using a color attribute.
     * Note that Cesium has 'interior' and outline geometries.
     * @param layer
     * @param feature OpenLayers feature.
     * @param olGeometry OpenLayers geometry.
     * @param geometry
     * @param color
     * @param opt_lineWidth
     * @return primitive
     */
    createColoredPrimitive(layer, feature, olGeometry, geometry, color, opt_lineWidth) {
        const createInstance = function (geometry, color) {
            const instance = new Cesium.GeometryInstance({
                geometry
            });
            if (color && !(color instanceof Cesium.ImageMaterialProperty)) {
                instance.attributes = {
                    color: Cesium.ColorGeometryInstanceAttribute.fromColor(color)
                };
            }
            return instance;
        };
        const options = {
            flat: true, // work with all geometries
            renderState: {
                depthTest: {
                    enabled: true
                }
            }
        };
        if (opt_lineWidth !== undefined) {
            options.renderState.lineWidth = opt_lineWidth;
        }
        const instances = createInstance(geometry, color);
        const heightReference = this.getHeightReference(layer, feature, olGeometry);
        let primitive;
        if (heightReference === Cesium.HeightReference.CLAMP_TO_GROUND) {
            if (!('createShadowVolume' in instances.geometry.constructor)) {
                // This is not a ground geometry
                return null;
            }
            primitive = new Cesium.GroundPrimitive({
                geometryInstances: instances
            });
        }
        else {
            primitive = new Cesium.Primitive({
                geometryInstances: instances
            });
        }
        if (color instanceof Cesium.ImageMaterialProperty) {
            // FIXME: we created stylings which are not time related
            // What should we pass here?
            // @ts-ignore
            const dataUri = color.image.getValue().toDataURL();
            primitive.appearance = new Cesium.MaterialAppearance({
                flat: true,
                renderState: {
                    depthTest: {
                        enabled: true,
                    }
                },
                material: new Cesium.Material({
                    fabric: {
                        type: 'Image',
                        uniforms: {
                            image: dataUri
                        }
                    }
                })
            });
        }
        else {
            primitive.appearance = new Cesium.MaterialAppearance({
                ...options,
                material: new Cesium.Material({
                    translucent: color.alpha !== 1,
                    fabric: {
                        type: 'Color',
                        uniforms: {
                            color,
                        }
                    }
                })
            });
            if (primitive instanceof Cesium.Primitive && (feature.get('olcs_shadows') || layer.get('olcs_shadows'))) {
                primitive.shadows = 1;
            }
        }
        this.setReferenceForPicking(layer, feature, primitive);
        return primitive;
    }
    /**
     * Return the fill or stroke color from a plain ol style.
     * @param style
     * @param outline
     * @return {!CSColor}
     */
    extractColorFromOlStyle(style, outline) {
        const fillColor = style.getFill() ? style.getFill().getColor() : null;
        const strokeColor = style.getStroke() ? style.getStroke().getColor() : null;
        let olColor = 'black';
        if (strokeColor && outline) {
            olColor = strokeColor;
        }
        else if (fillColor) {
            olColor = fillColor;
        }
        return convertColorToCesium(olColor);
    }
    /**
     * Return the width of stroke from a plain ol style.
     * @param style
     * @return {number}
     */
    extractLineWidthFromOlStyle(style) {
        // Handling of line width WebGL limitations is handled by Cesium.
        const width = style.getStroke() ? style.getStroke().getWidth() : undefined;
        return width !== undefined ? width : 1;
    }
    /**
     * Create a primitive collection out of two Cesium geometries.
     * Only the OpenLayers style colors will be used.
     */
    wrapFillAndOutlineGeometries(layer, feature, olGeometry, fillGeometry, outlineGeometry, olStyle) {
        const fillColor = this.extractColorFromOlStyle(olStyle, false);
        const outlineColor = this.extractColorFromOlStyle(olStyle, true);
        const primitives = new Cesium.PrimitiveCollection();
        if (olStyle.getFill()) {
            const p1 = this.createColoredPrimitive(layer, feature, olGeometry, fillGeometry, fillColor);
            console.assert(!!p1);
            primitives.add(p1);
        }
        if (olStyle.getStroke() && outlineGeometry) {
            const width = this.extractLineWidthFromOlStyle(olStyle);
            const p2 = this.createColoredPrimitive(layer, feature, olGeometry, outlineGeometry, outlineColor, width);
            if (p2) {
                // Some outline geometries are not supported by Cesium in clamp to ground
                // mode. These primitives are skipped.
                primitives.add(p2);
            }
        }
        return primitives;
    }
    // Geometry converters
    // FIXME: would make more sense to only accept primitive collection.
    /**
     * Create a Cesium primitive if style has a text component.
     * Eventually return a PrimitiveCollection including current primitive.
     */
    addTextStyle(layer, feature, geometry, style, primitive) {
        let primitives;
        if (!(primitive instanceof Cesium.PrimitiveCollection)) {
            primitives = new Cesium.PrimitiveCollection();
            primitives.add(primitive);
        }
        else {
            primitives = primitive;
        }
        if (!style.getText()) {
            return primitives;
        }
        const text = /** @type {!ol.style.Text} */ (style.getText());
        const label = this.olGeometry4326TextPartToCesium(layer, feature, geometry, text);
        if (label) {
            primitives.add(label);
        }
        return primitives;
    }
    /**
     * Add a billboard to a Cesium.BillboardCollection.
     * Overriding this wrapper allows manipulating the billboard options.
     * @param billboards
     * @param bbOptions
     * @param layer
     * @param feature OpenLayers feature.
     * @param geometry
     * @param style
     * @return newly created billboard
     * @api
     */
    csAddBillboard(billboards, bbOptions, layer, feature, geometry, style) {
        if (!bbOptions.eyeOffset) {
            bbOptions.eyeOffset = this.defaultBillboardEyeOffset_;
        }
        const bb = billboards.add(bbOptions);
        this.setReferenceForPicking(layer, feature, bb);
        return bb;
    }
    /**
     * Convert an OpenLayers circle geometry to Cesium.
     * @api
     */
    olCircleGeometryToCesium(layer, feature, olGeometry, projection, olStyle) {
        olGeometry = olGeometryCloneTo4326(olGeometry, projection);
        console.assert(olGeometry.getType() == 'Circle');
        // ol.Coordinate
        const olCenter = olGeometry.getCenter();
        const height = olCenter.length == 3 ? olCenter[2] : 0.0;
        const olPoint = olCenter.slice();
        olPoint[0] += olGeometry.getRadius();
        // Cesium
        const center = ol4326CoordinateToCesiumCartesian(olCenter);
        const point = ol4326CoordinateToCesiumCartesian(olPoint);
        // Accurate computation of straight distance
        const radius = Cesium.Cartesian3.distance(center, point);
        const fillGeometry = new Cesium.CircleGeometry({
            center,
            radius,
            height
        });
        let outlinePrimitive;
        let outlineGeometry;
        if (this.getHeightReference(layer, feature, olGeometry) === Cesium.HeightReference.CLAMP_TO_GROUND) {
            const width = this.extractLineWidthFromOlStyle(olStyle);
            if (width) {
                const circlePolygon = olCreateCircularPolygon(olGeometry.getCenter(), radius);
                const positions = ol4326CoordinateArrayToCsCartesians(circlePolygon.getLinearRing(0).getCoordinates());
                const op = outlinePrimitive = new Cesium.GroundPolylinePrimitive({
                    geometryInstances: new Cesium.GeometryInstance({
                        geometry: new Cesium.GroundPolylineGeometry({ positions, width }),
                    }),
                    appearance: new Cesium.PolylineMaterialAppearance({
                        material: this.olStyleToCesium(feature, olStyle, true),
                    }),
                    classificationType: Cesium.ClassificationType.TERRAIN,
                });
                waitReady(outlinePrimitive).then(() => {
                    this.setReferenceForPicking(layer, feature, op._primitive);
                });
            }
        }
        else {
            outlineGeometry = new Cesium.CircleOutlineGeometry({
                center,
                radius,
                extrudedHeight: height,
                height
            });
        }
        const primitives = this.wrapFillAndOutlineGeometries(layer, feature, olGeometry, fillGeometry, outlineGeometry, olStyle);
        if (outlinePrimitive) {
            primitives.add(outlinePrimitive);
        }
        return this.addTextStyle(layer, feature, olGeometry, olStyle, primitives);
    }
    /**
     * Convert an OpenLayers line string geometry to Cesium.
     * @api
     */
    olLineStringGeometryToCesium(layer, feature, olGeometry, projection, olStyle) {
        olGeometry = olGeometryCloneTo4326(olGeometry, projection);
        console.assert(olGeometry.getType() == 'LineString');
        const positions = ol4326CoordinateArrayToCsCartesians(olGeometry.getCoordinates());
        const width = this.extractLineWidthFromOlStyle(olStyle);
        let outlinePrimitive;
        const heightReference = this.getHeightReference(layer, feature, olGeometry);
        const appearance = new Cesium.PolylineMaterialAppearance({
            material: this.olStyleToCesium(feature, olStyle, true)
        });
        if (heightReference === Cesium.HeightReference.CLAMP_TO_GROUND) {
            const geometry = new Cesium.GroundPolylineGeometry({
                positions,
                width,
            });
            const op = outlinePrimitive = new Cesium.GroundPolylinePrimitive({
                appearance,
                geometryInstances: new Cesium.GeometryInstance({
                    geometry
                })
            });
            waitReady(outlinePrimitive).then(() => {
                this.setReferenceForPicking(layer, feature, op._primitive);
            });
        }
        else {
            const geometry = new Cesium.PolylineGeometry({
                positions,
                width,
                vertexFormat: appearance.vertexFormat
            });
            outlinePrimitive = new Cesium.Primitive({
                appearance,
                geometryInstances: new Cesium.GeometryInstance({
                    geometry
                }),
            });
        }
        this.setReferenceForPicking(layer, feature, outlinePrimitive);
        return this.addTextStyle(layer, feature, olGeometry, olStyle, outlinePrimitive);
    }
    /**
     * Convert an OpenLayers polygon geometry to Cesium.
     * @api
     */
    olPolygonGeometryToCesium(layer, feature, olGeometry, projection, olStyle) {
        olGeometry = olGeometryCloneTo4326(olGeometry, projection);
        console.assert(olGeometry.getType() == 'Polygon');
        const heightReference = this.getHeightReference(layer, feature, olGeometry);
        let fillGeometry, outlineGeometry;
        let outlinePrimitive;
        if ((olGeometry.getCoordinates()[0].length == 5) &&
            (feature.get('olcs.polygon_kind') === 'rectangle')) {
            // Create a rectangle according to the longitude and latitude curves
            const coordinates = olGeometry.getCoordinates()[0];
            // Extract the West, South, East, North coordinates
            const extent = boundingExtent(coordinates);
            const rectangle = Cesium.Rectangle.fromDegrees(extent[0], extent[1], extent[2], extent[3]);
            // Extract the average height of the vertices
            let maxHeight = 0.0;
            if (coordinates[0].length == 3) {
                for (let c = 0; c < coordinates.length; c++) {
                    maxHeight = Math.max(maxHeight, coordinates[c][2]);
                }
            }
            const featureExtrudedHeight = feature.get('olcs_extruded_height');
            // Render the cartographic rectangle
            fillGeometry = new Cesium.RectangleGeometry({
                ellipsoid: Cesium.Ellipsoid.WGS84,
                rectangle,
                height: maxHeight,
                extrudedHeight: featureExtrudedHeight,
            });
            outlineGeometry = new Cesium.RectangleOutlineGeometry({
                ellipsoid: Cesium.Ellipsoid.WGS84,
                rectangle,
                height: maxHeight,
                extrudedHeight: featureExtrudedHeight,
            });
        }
        else {
            const rings = olGeometry.getLinearRings();
            const hierarchy = {
                positions: [],
                holes: [],
            };
            const polygonHierarchy = hierarchy;
            console.assert(rings.length > 0);
            for (let i = 0; i < rings.length; ++i) {
                const olPos = rings[i].getCoordinates();
                const positions = ol4326CoordinateArrayToCsCartesians(olPos);
                console.assert(positions && positions.length > 0);
                if (i === 0) {
                    hierarchy.positions = positions;
                }
                else {
                    hierarchy.holes.push({
                        positions,
                        holes: [],
                    });
                }
            }
            const featureExtrudedHeight = feature.get('olcs_extruded_height');
            fillGeometry = new Cesium.PolygonGeometry({
                polygonHierarchy,
                perPositionHeight: true,
                extrudedHeight: featureExtrudedHeight,
            });
            // Since Cesium doesn't yet support Polygon outlines on terrain yet (coming soon...?)
            // we don't create an outline geometry if clamped, but instead do the polyline method
            // for each ring. Most of this code should be removeable when Cesium adds
            // support for Polygon outlines on terrain.
            if (heightReference === Cesium.HeightReference.CLAMP_TO_GROUND) {
                const width = this.extractLineWidthFromOlStyle(olStyle);
                if (width > 0) {
                    const positions = [hierarchy.positions];
                    if (hierarchy.holes) {
                        for (let i = 0; i < hierarchy.holes.length; ++i) {
                            positions.push(hierarchy.holes[i].positions);
                        }
                    }
                    const appearance = new Cesium.PolylineMaterialAppearance({
                        material: this.olStyleToCesium(feature, olStyle, true)
                    });
                    const geometryInstances = [];
                    for (const linePositions of positions) {
                        const polylineGeometry = new Cesium.GroundPolylineGeometry({ positions: linePositions, width });
                        geometryInstances.push(new Cesium.GeometryInstance({
                            geometry: polylineGeometry
                        }));
                    }
                    outlinePrimitive = new Cesium.GroundPolylinePrimitive({
                        appearance,
                        geometryInstances
                    });
                    waitReady(outlinePrimitive).then(() => {
                        this.setReferenceForPicking(layer, feature, outlinePrimitive._primitive);
                    });
                }
            }
            else {
                // Actually do the normal polygon thing. This should end the removable
                // section of code described above.
                outlineGeometry = new Cesium.PolygonOutlineGeometry({
                    polygonHierarchy: hierarchy,
                    perPositionHeight: true,
                    extrudedHeight: featureExtrudedHeight,
                });
            }
        }
        const primitives = this.wrapFillAndOutlineGeometries(layer, feature, olGeometry, fillGeometry, outlineGeometry, olStyle);
        if (outlinePrimitive) {
            primitives.add(outlinePrimitive);
        }
        return this.addTextStyle(layer, feature, olGeometry, olStyle, primitives);
    }
    /**
     * @api
     */
    getHeightReference(layer, feature, geometry) {
        // Read from the geometry
        let altitudeMode = geometry.get('altitudeMode');
        // Or from the feature
        if (altitudeMode === undefined) {
            altitudeMode = feature.get('altitudeMode');
        }
        // Or from the layer
        if (altitudeMode === undefined) {
            altitudeMode = layer.get('altitudeMode');
        }
        let heightReference = Cesium.HeightReference.NONE;
        if (altitudeMode === 'clampToGround') {
            heightReference = Cesium.HeightReference.CLAMP_TO_GROUND;
        }
        else if (altitudeMode === 'relativeToGround') {
            heightReference = Cesium.HeightReference.RELATIVE_TO_GROUND;
        }
        return heightReference;
    }
    /**
     * Convert a point geometry to a Cesium BillboardCollection.
     * @param {ol.layer.Vector|ol.layer.Image} layer
     * @param {!ol.Feature} feature OpenLayers feature..
     * @param {!ol.geom.Point} olGeometry OpenLayers point geometry.
     * @param {!ol.ProjectionLike} projection
     * @param {!ol.style.Style} style
     * @param {!ol.style.Image} imageStyle
     * @param {!Cesium.BillboardCollection} billboards
     * @param {function(!Cesium.Billboard)=} opt_newBillboardCallback Called when the new billboard is added.
     * @api
     */
    createBillboardFromImage(layer, feature, olGeometry, projection, style, imageStyle, billboards, opt_newBillboardCallback) {
        if (imageStyle instanceof OLStyleIcon) {
            // make sure the image is scheduled for load
            imageStyle.load();
        }
        const image = imageStyle.getImage(1); // get normal density
        const isImageLoaded = function (image) {
            return image.src != '' &&
                image.naturalHeight != 0 &&
                image.naturalWidth != 0 &&
                image.complete;
        };
        const reallyCreateBillboard = (function () {
            if (!image) {
                return;
            }
            if (!(image instanceof HTMLCanvasElement ||
                image instanceof Image ||
                image instanceof HTMLImageElement)) {
                return;
            }
            const center = olGeometry.getCoordinates();
            const position = ol4326CoordinateToCesiumCartesian(center);
            let color;
            const opacity = imageStyle.getOpacity();
            if (opacity !== undefined) {
                color = new Cesium.Color(1.0, 1.0, 1.0, opacity);
            }
            const scale = imageStyle.getScale();
            const heightReference = this.getHeightReference(layer, feature, olGeometry);
            const bbOptions = {
                image,
                color,
                scale,
                heightReference,
                position
            };
            // merge in cesium options from openlayers feature
            Object.assign(bbOptions, feature.get('cesiumOptions'));
            if (imageStyle instanceof OLStyleIcon) {
                const anchor = imageStyle.getAnchor();
                if (anchor) {
                    const xScale = (Array.isArray(scale) ? scale[0] : scale);
                    const yScale = (Array.isArray(scale) ? scale[1] : scale);
                    bbOptions.pixelOffset = new Cesium.Cartesian2((image.width / 2 - anchor[0]) * xScale, (image.height / 2 - anchor[1]) * yScale);
                }
            }
            const bb = this.csAddBillboard(billboards, bbOptions, layer, feature, olGeometry, style);
            if (opt_newBillboardCallback) {
                opt_newBillboardCallback(bb);
            }
        }).bind(this);
        if (image instanceof Image && !isImageLoaded(image)) {
            // Cesium requires the image to be loaded
            let cancelled = false;
            const source = layer.getSource();
            const canceller = function () {
                cancelled = true;
            };
            source.on(['removefeature', 'clear'], this.boundOnRemoveOrClearFeatureListener_);
            let cancellers = source['olcs_cancellers'];
            if (!cancellers) {
                cancellers = source['olcs_cancellers'] = {};
            }
            const fuid = getUid(feature);
            if (cancellers[fuid]) {
                // When the feature change quickly, a canceller may still be present so
                // we cancel it here to prevent creation of a billboard.
                cancellers[fuid]();
            }
            cancellers[fuid] = canceller;
            const listener = function () {
                image.removeEventListener('load', listener);
                if (!billboards.isDestroyed() && !cancelled) {
                    // Create billboard if the feature is still displayed on the map.
                    reallyCreateBillboard();
                }
            };
            image.addEventListener('load', listener);
        }
        else {
            reallyCreateBillboard();
        }
    }
    /**
     * Convert a point geometry to a Cesium BillboardCollection.
     * @param layer
     * @param feature OpenLayers feature..
     * @param olGeometry OpenLayers point geometry.
     * @param projection
     * @param style
     * @param billboards
     * @param opt_newBillboardCallback Called when the new billboard is added.
     * @return primitives
     * @api
     */
    olPointGeometryToCesium(layer, feature, olGeometry, projection, style, billboards, opt_newBillboardCallback) {
        console.assert(olGeometry.getType() == 'Point');
        olGeometry = olGeometryCloneTo4326(olGeometry, projection);
        let modelPrimitive = null;
        const imageStyle = style.getImage();
        if (imageStyle) {
            const olcsModelFunction = olGeometry.get('olcs_model') || feature.get('olcs_model');
            if (olcsModelFunction) {
                modelPrimitive = new Cesium.PrimitiveCollection();
                const olcsModel = olcsModelFunction();
                const options = Object.assign({}, { scene: this.scene }, olcsModel.cesiumOptions);
                if ('fromGltf' in Cesium.Model) {
                    // pre Cesium v107
                    // @ts-ignore
                    const model = Cesium.Model.fromGltf(options);
                    modelPrimitive.add(model);
                }
                else {
                    Cesium.Model.fromGltfAsync(options).then((model) => {
                        modelPrimitive.add(model);
                    });
                }
                if (olcsModel.debugModelMatrix) {
                    modelPrimitive.add(new Cesium.DebugModelMatrixPrimitive({
                        modelMatrix: olcsModel.debugModelMatrix
                    }));
                }
            }
            else {
                this.createBillboardFromImage(layer, feature, olGeometry, projection, style, imageStyle, billboards, opt_newBillboardCallback);
            }
        }
        if (style.getText()) {
            return this.addTextStyle(layer, feature, olGeometry, style, modelPrimitive || new Cesium.Primitive());
        }
        else {
            return modelPrimitive;
        }
    }
    /**
     * Convert an OpenLayers multi-something geometry to Cesium.
     * @param {ol.layer.Vector|ol.layer.Image} layer
     * @param {!ol.Feature} feature OpenLayers feature..
     * @param {!ol.geom.Geometry} geometry OpenLayers geometry.
     * @param {!ol.ProjectionLike} projection
     * @param {!ol.style.Style} olStyle
     * @param {!Cesium.BillboardCollection} billboards
     * @param {function(!Cesium.Billboard)=} opt_newBillboardCallback Called when
     * the new billboard is added.
     * @return {Cesium.Primitive} primitives
     * @api
     */
    olMultiGeometryToCesium(layer, feature, geometry, projection, olStyle, billboards, opt_newBillboardCallback) {
        // Do not reproject to 4326 now because it will be done later.
        switch (geometry.getType()) {
            case 'MultiPoint': {
                const points = geometry.getPoints();
                if (olStyle.getText()) {
                    const primitives = new Cesium.PrimitiveCollection();
                    points.forEach((geom) => {
                        console.assert(geom);
                        const result = this.olPointGeometryToCesium(layer, feature, geom, projection, olStyle, billboards, opt_newBillboardCallback);
                        if (result) {
                            primitives.add(result);
                        }
                    });
                    return primitives;
                }
                else {
                    points.forEach((geom) => {
                        console.assert(geom);
                        this.olPointGeometryToCesium(layer, feature, geom, projection, olStyle, billboards, opt_newBillboardCallback);
                    });
                    return null;
                }
            }
            case 'MultiLineString': {
                const lineStrings = geometry.getLineStrings();
                // FIXME: would be better to combine all child geometries in one primitive
                // instead we create n primitives for simplicity.
                const primitives = new Cesium.PrimitiveCollection();
                lineStrings.forEach((geom) => {
                    const p = this.olLineStringGeometryToCesium(layer, feature, geom, projection, olStyle);
                    primitives.add(p);
                });
                return primitives;
            }
            case 'MultiPolygon': {
                const polygons = geometry.getPolygons();
                // FIXME: would be better to combine all child geometries in one primitive
                // instead we create n primitives for simplicity.
                const primitives = new Cesium.PrimitiveCollection();
                polygons.forEach((geom) => {
                    const p = this.olPolygonGeometryToCesium(layer, feature, geom, projection, olStyle);
                    primitives.add(p);
                });
                return primitives;
            }
            default:
                console.assert(false, `Unhandled multi geometry type${geometry.getType()}`);
        }
    }
    /**
     * Convert an OpenLayers text style to Cesium.
     * @api
     */
    olGeometry4326TextPartToCesium(layer, feature, geometry, style) {
        const text = style.getText();
        if (!text) {
            return null;
        }
        const labels = new Cesium.LabelCollection({ scene: this.scene });
        // TODO: export and use the text draw position from OpenLayers .
        // See src/ol/render/vector.js
        const extentCenter = getCenter(geometry.getExtent());
        if (geometry instanceof olGeomSimpleGeometry) {
            const first = geometry.getFirstCoordinate();
            extentCenter[2] = first.length == 3 ? first[2] : 0.0;
        }
        const options = {};
        options.position = ol4326CoordinateToCesiumCartesian(extentCenter);
        options.text = text;
        options.heightReference = this.getHeightReference(layer, feature, geometry);
        const offsetX = style.getOffsetX();
        const offsetY = style.getOffsetY();
        if (offsetX != 0 || offsetY != 0) {
            const offset = new Cesium.Cartesian2(offsetX, offsetY);
            options.pixelOffset = offset;
        }
        options.font = style.getFont() || '10px sans-serif'; // OpenLayers default
        let labelStyle = undefined;
        if (style.getFill()) {
            options.fillColor = this.extractColorFromOlStyle(style, false);
            labelStyle = Cesium.LabelStyle.FILL;
        }
        if (style.getStroke()) {
            options.outlineWidth = this.extractLineWidthFromOlStyle(style);
            options.outlineColor = this.extractColorFromOlStyle(style, true);
            labelStyle = Cesium.LabelStyle.OUTLINE;
        }
        if (style.getFill() && style.getStroke()) {
            labelStyle = Cesium.LabelStyle.FILL_AND_OUTLINE;
        }
        options.style = labelStyle;
        let horizontalOrigin;
        switch (style.getTextAlign()) {
            case 'left':
                horizontalOrigin = Cesium.HorizontalOrigin.LEFT;
                break;
            case 'right':
                horizontalOrigin = Cesium.HorizontalOrigin.RIGHT;
                break;
            case 'center':
            default:
                horizontalOrigin = Cesium.HorizontalOrigin.CENTER;
        }
        options.horizontalOrigin = horizontalOrigin;
        if (style.getTextBaseline()) {
            let verticalOrigin;
            switch (style.getTextBaseline()) {
                case 'top':
                    verticalOrigin = Cesium.VerticalOrigin.TOP;
                    break;
                case 'middle':
                    verticalOrigin = Cesium.VerticalOrigin.CENTER;
                    break;
                case 'bottom':
                    verticalOrigin = Cesium.VerticalOrigin.BOTTOM;
                    break;
                case 'alphabetic':
                    verticalOrigin = Cesium.VerticalOrigin.TOP;
                    break;
                case 'hanging':
                    verticalOrigin = Cesium.VerticalOrigin.BOTTOM;
                    break;
                default:
                    console.assert(false, `unhandled baseline ${style.getTextBaseline()}`);
            }
            options.verticalOrigin = verticalOrigin;
        }
        const l = labels.add(options);
        this.setReferenceForPicking(layer, feature, l);
        return labels;
    }
    /**
     * Convert an OpenLayers style to a Cesium Material.
     * @api
     */
    olStyleToCesium(feature, style, outline) {
        const fill = style.getFill();
        const stroke = style.getStroke();
        if ((outline && !stroke) || (!outline && !fill)) {
            return null; // FIXME use a default style? Developer error?
        }
        const olColor = outline ? stroke.getColor() : fill.getColor();
        const color = convertColorToCesium(olColor);
        if (outline && stroke.getLineDash()) {
            return Cesium.Material.fromType('Stripe', {
                horizontal: false,
                repeat: 500, // TODO how to calculate this?
                evenColor: color,
                oddColor: new Cesium.Color(0, 0, 0, 0) // transparent
            });
        }
        else {
            return Cesium.Material.fromType('Color', {
                color
            });
        }
    }
    /**
     * Compute OpenLayers plain style.
     * Evaluates style function, blend arrays, get default style.
     * @api
     */
    computePlainStyle(layer, feature, fallbackStyleFunction, resolution) {
        /**
         * @type {ol.FeatureStyleFunction|undefined}
         */
        const featureStyleFunction = feature.getStyleFunction();
        /**
         * @type {ol.style.Style|Array.<ol.style.Style>}
         */
        let style = null;
        if (featureStyleFunction) {
            style = featureStyleFunction(feature, resolution);
        }
        if (!style && fallbackStyleFunction) {
            style = fallbackStyleFunction(feature, resolution);
        }
        if (!style) {
            // The feature must not be displayed
            return null;
        }
        // FIXME combine materials as in cesium-materials-pack?
        // then this function must return a custom material
        // More simply, could blend the colors like described in
        // http://en.wikipedia.org/wiki/Alpha_compositing
        return Array.isArray(style) ? style : [style];
    }
    /**
     */
    getGeometryFromFeature(feature, style, opt_geom) {
        if (opt_geom) {
            return opt_geom;
        }
        const geom3d = feature.get('olcs.3d_geometry');
        if (geom3d && geom3d instanceof OLGeometry) {
            return geom3d;
        }
        if (style) {
            const geomFuncRes = style.getGeometryFunction()(feature);
            if (geomFuncRes instanceof OLGeometry) {
                return geomFuncRes;
            }
        }
        return feature.getGeometry();
    }
    /**
     * Convert one OpenLayers feature up to a collection of Cesium primitives.
     * @api
     */
    olFeatureToCesium(layer, feature, style, context, opt_geom) {
        const geom = this.getGeometryFromFeature(feature, style, opt_geom);
        if (!geom) {
            // OpenLayers features may not have a geometry
            // See http://geojson.org/geojson-spec.html#feature-objects
            return null;
        }
        const proj = context.projection;
        const newBillboardAddedCallback = function (bb) {
            const featureBb = context.featureToCesiumMap[getUid(feature)];
            if (featureBb instanceof Array) {
                featureBb.push(bb);
            }
            else {
                context.featureToCesiumMap[getUid(feature)] = [bb];
            }
        };
        switch (geom.getType()) {
            case 'GeometryCollection':
                const primitives = new Cesium.PrimitiveCollection();
                geom.getGeometriesArray().forEach((geom) => {
                    if (geom) {
                        const prims = this.olFeatureToCesium(layer, feature, style, context, geom);
                        if (prims) {
                            primitives.add(prims);
                        }
                    }
                });
                return primitives;
            case 'Point':
                const bbs = context.billboards;
                const result = this.olPointGeometryToCesium(layer, feature, geom, proj, style, bbs, newBillboardAddedCallback);
                if (!result) {
                    // no wrapping primitive
                    return null;
                }
                else {
                    return result;
                }
            case 'Circle':
                return this.olCircleGeometryToCesium(layer, feature, geom, proj, style);
            case 'LineString':
                return this.olLineStringGeometryToCesium(layer, feature, geom, proj, style);
            case 'Polygon':
                return this.olPolygonGeometryToCesium(layer, feature, geom, proj, style);
            case 'MultiPoint':
                return this.olMultiGeometryToCesium(layer, feature, geom, proj, style, context.billboards, newBillboardAddedCallback) || null;
            case 'MultiLineString':
                return this.olMultiGeometryToCesium(layer, feature, geom, proj, style, context.billboards, newBillboardAddedCallback) || null;
            case 'MultiPolygon':
                return this.olMultiGeometryToCesium(layer, feature, geom, proj, style, context.billboards, newBillboardAddedCallback) || null;
            case 'LinearRing':
                throw new Error('LinearRing should only be part of polygon.');
            default:
                throw new Error(`Ol geom type not handled : ${geom.getType()}`);
        }
    }
    /**
     * Convert an OpenLayers vector layer to Cesium primitive collection.
     * For each feature, the associated primitive will be stored in
     * `featurePrimitiveMap`.
     * @api
     */
    olVectorLayerToCesium(olLayer, olView, featurePrimitiveMap) {
        const proj = olView.getProjection();
        const resolution = olView.getResolution();
        if (resolution === undefined || !proj) {
            console.assert(false, 'View not ready');
            // an assertion is not enough for closure to assume resolution and proj
            // are defined
            throw new Error('View not ready');
        }
        let source = olLayer.getSource();
        if (source instanceof OLClusterSource) {
            source = source.getSource();
        }
        console.assert(source instanceof VectorSource);
        const features = source.getFeatures();
        const counterpart = new VectorLayerCounterpart(proj, this.scene);
        const context = counterpart.context;
        for (let i = 0; i < features.length; ++i) {
            const feature = features[i];
            if (!feature) {
                continue;
            }
            const layerStyle = olLayer.getStyleFunction();
            const styles = this.computePlainStyle(olLayer, feature, layerStyle, resolution);
            if (!styles || !styles.length) {
                // only 'render' features with a style
                continue;
            }
            let primitives = null;
            for (let i = 0; i < styles.length; i++) {
                const prims = this.olFeatureToCesium(olLayer, feature, styles[i], context);
                if (prims) {
                    if (!primitives) {
                        primitives = prims;
                    }
                    else if (prims) {
                        let i = 0, prim;
                        while ((prim = prims.get(i))) {
                            primitives.add(prim);
                            i++;
                        }
                    }
                }
            }
            if (!primitives) {
                continue;
            }
            featurePrimitiveMap[getUid(feature)] = primitives;
            counterpart.getRootPrimitive().add(primitives);
        }
        return counterpart;
    }
    /**
     * Convert an OpenLayers feature to Cesium primitive collection.
     * @api
     */
    convert(layer, view, feature, context) {
        const proj = view.getProjection();
        const resolution = view.getResolution();
        if (resolution == undefined || !proj) {
            return null;
        }
        /**
         * @type {ol.StyleFunction|undefined}
         */
        const layerStyle = layer.getStyleFunction();
        const styles = this.computePlainStyle(layer, feature, layerStyle, resolution);
        if (!styles || !styles.length) {
            // only 'render' features with a style
            return null;
        }
        context.projection = proj;
        /**
         * @type {Cesium.Primitive|null}
         */
        let primitives = null;
        for (let i = 0; i < styles.length; i++) {
            const prims = this.olFeatureToCesium(layer, feature, styles[i], context);
            if (!primitives) {
                primitives = prims;
            }
            else if (prims) {
                let i = 0, prim;
                while ((prim = prims.get(i))) {
                    primitives.add(prim);
                    i++;
                }
            }
        }
        return primitives;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmVhdHVyZUNvbnZlcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbGNzL0ZlYXR1cmVDb252ZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxXQUFXLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxZQUFZLEVBQUUsRUFBd0IsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RSxPQUFPLGVBQWUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsUUFBUSxJQUFJLHVCQUF1QixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDdkUsT0FBTyxFQUFDLGNBQWMsRUFBRSxTQUFTLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDdkQsT0FBTyxvQkFBb0IsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUsaUNBQWlDLEVBQUUsbUNBQW1DLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDM0ksT0FBTyxzQkFBc0IsRUFBRSxFQUErQixNQUFNLCtCQUErQixDQUFDO0FBQ3BHLE9BQU8sRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBTXpDLE9BQU8sRUFBMkMsTUFBTSxtQkFBbUIsQ0FBQztBQUk1RSxPQUFPLEVBQUMsUUFBUSxJQUFJLFVBQVUsRUFBNEksTUFBTSxZQUFZLENBQUM7QUFvRDdMLE1BQU0sQ0FBQyxPQUFPLE9BQU8sZ0JBQWdCO0lBaUJiO0lBZnRCOztPQUVHO0lBQ0ssb0NBQW9DLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUvRSwwQkFBMEIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVyRTs7Ozs7OztPQU9HO0lBQ0gsWUFBc0IsS0FBWTtRQUFaLFVBQUssR0FBTCxLQUFLLENBQU87UUFDaEMs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