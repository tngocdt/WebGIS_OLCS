import MVT from 'ol/format/MVT.js';
import Style, {} from 'ol/style/Style.js';
import Stroke from 'ol/style/Stroke.js';
import { toContext } from 'ol/render.js';
import { get as getProjection } from 'ol/proj.js';
import { VERSION as OL_VERSION } from 'ol/util.js';
import LRUCache from 'ol/structs/LRUCache.js';
import { getForProjection as getTilegridForProjection } from 'ol/tilegrid.js';
import { createFromTemplates as createTileUrlFunctions } from 'ol/tileurlfunction.js';
import RenderFeature from 'ol/render/Feature.js';
import { createEmptyCanvas } from './core/OLImageryProvider_v02.js';
const format = new MVT({
    featureClass: RenderFeature
});
const styles = [new Style({
        stroke: new Stroke({
            color: 'blue',
            width: 2
        })
    })];
export default class MVTImageryProvider {
    urls;
    emptyCanvas_ = createEmptyCanvas();
    emptyCanvasPromise_ = Promise.resolve(this.emptyCanvas_);
    tilingScheme_ = new Cesium.WebMercatorTilingScheme;
    ready_ = true;
    rectangle_;
    tileRectangle_;
    tileWidth = 256;
    tileHeight = 256;
    maximumLevel = 20;
    minimumLevel_ = 0;
    get minimumLevel() {
        return this.minimumLevel_;
    }
    featureCache;
    tileCache;
    tileFunction_;
    styleFunction_;
    projection_ = getProjection('EPSG:3857');
    /**
   * When <code>true</code>, this model is ready to render, i.e., the external binary, image,
   * and shader files were downloaded and the WebGL resources were created.
   */
    get ready() {
        return this.ready_;
    }
    /**
   * Gets the rectangle, in radians, of the imagery provided by the instance.
   */
    get rectangle() {
        return this.rectangle_;
    }
    /**
     * Gets the tiling scheme used by the provider.
     */
    get tilingScheme() {
        return this.tilingScheme_;
    }
    /**
     * Gets an event that is raised when the imagery provider encounters an asynchronous error.  By subscribing
     * to the event, you will be notified of the error and can potentially recover from it.  Event listeners
     * are passed an instance of {@link Cesium.TileProviderError}.
     */
    errorEvent = new Cesium.Event();
    /**
     * Gets the credit to display when this imagery provider is active.  Typically this is used to credit
     * the source of the imagery.
     */
    credit;
    getTileCredits(x, y, level) {
        return [];
    }
    /**
     * Gets the proxy used by this provider.
     */
    proxy;
    get _ready() {
        return this.ready_;
    }
    /**
     * Gets the tile discard policy.  If not undefined, the discard policy is responsible
     * for filtering out "missing" tiles via its shouldDiscardImage function.  If this function
     * returns undefined, no tiles are filtered.
     */
    get tileDiscardPolicy() {
        return undefined;
    }
    // FIXME: this might be exposed
    /**
     * Gets a value indicating whether or not the images provided by this imagery provider
     * include an alpha channel.  If this property is false, an alpha channel, if present, will
     * be ignored.  If this property is true, any images without an alpha channel will be treated
     * as if their alpha is 1.0 everywhere.  When this property is false, memory usage
     * and texture upload time are reduced.
     */
    get hasAlphaChannel() {
        return true;
    }
    // FIXME: this could be implemented by proxying to OL
    /**
     * Asynchronously determines what features, if any, are located at a given longitude and latitude within
     * a tile.
     * This function is optional, so it may not exist on all ImageryProviders.
     * @param x - The tile X coordinate.
     * @param y - The tile Y coordinate.
     * @param level - The tile level.
     * @param longitude - The longitude at which to pick features.
     * @param latitude - The latitude at which to pick features.
     * @return A promise for the picked features that will resolve when the asynchronous
     *                   picking completes.  The resolved value is an array of {@link ImageryLayerFeatureInfo}
     *                   instances.  The array may be empty if no features are found at the given location.
     *                   It may also be undefined if picking is not supported.
     */
    pickFeatures(x, y, level, longitude, latitude) {
        return undefined;
    }
    constructor(options) {
        this.urls = options.urls;
        this.rectangle_ = options.rectangle || this.tilingScheme.rectangle;
        this.credit = options.credit;
        this.styleFunction_ = options.styleFunction || (() => styles);
        this.tileRectangle_ = new Cesium.Rectangle();
        // to avoid too frequent cache grooming we allow x2 capacity
        const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 50;
        this.tileCache = new LRUCache(cacheSize);
        this.featureCache = options.featureCache || new LRUCache(cacheSize);
        this.minimumLevel_ = options.minimumLevel || 0;
        const tileGrid = getTilegridForProjection(this.projection_);
        this.tileFunction_ = createTileUrlFunctions(this.urls, tileGrid);
    }
    getTileFeatures(z, x, y) {
        const cacheKey = this.getCacheKey_(z, x, y);
        let promise;
        if (this.featureCache.containsKey(cacheKey)) {
            promise = this.featureCache.get(cacheKey);
        }
        if (!promise) {
            const url = this.getUrl_(z, x, y);
            promise = fetch(url)
                .then(r => (r.ok ? r : Promise.reject(r)))
                .then(r => r.arrayBuffer())
                .then(buffer => this.readFeaturesFromBuffer(buffer));
            this.featureCache.set(cacheKey, promise);
            if (this.featureCache.getCount() > 2 * this.featureCache.highWaterMark) {
                while (this.featureCache.canExpireCache()) {
                    this.featureCache.pop();
                }
            }
        }
        return promise;
    }
    readFeaturesFromBuffer(buffer) {
        let options;
        if (OL_VERSION <= '6.4.4') {
            // See https://github.com/openlayers/openlayers/pull/11540
            options = {
                extent: [0, 0, 4096, 4096],
                dataProjection: this.projection_,
                featureProjection: this.projection_
            };
        }
        const features = format.readFeatures(buffer, options);
        const scaleFactor = this.tileWidth / 4096;
        features.forEach((f) => {
            const flatCoordinates = f.getFlatCoordinates();
            let flip = false;
            for (let i = 0; i < flatCoordinates.length; ++i) {
                flatCoordinates[i] *= scaleFactor;
                if (flip) {
                    // FIXME: why do we need this now?
                    flatCoordinates[i] = this.tileWidth - flatCoordinates[i];
                }
                if (OL_VERSION <= '6.4.4') {
                    // LEGACY
                    flip = !flip;
                }
            }
        });
        return features;
    }
    getUrl_(z, x, y) {
        // FIXME: probably we should not pass 1 as pixelRatio
        const url = this.tileFunction_([z, x, y], 1, this.projection_);
        return url;
    }
    getCacheKey_(z, x, y) {
        return `${z}_${x}_${y}`;
    }
    requestImage(x, y, z, request) {
        if (z < this.minimumLevel_) {
            return this.emptyCanvasPromise_;
        }
        try {
            const cacheKey = this.getCacheKey_(z, x, y);
            let promise;
            if (this.tileCache.containsKey(cacheKey)) {
                promise = this.tileCache.get(cacheKey);
            }
            if (!promise) {
                promise = this.getTileFeatures(z, x, y)
                    .then((features) => {
                    // FIXME: here we suppose the 2D projection is in meters
                    this.tilingScheme.tileXYToNativeRectangle(x, y, z, this.tileRectangle_);
                    const resolution = (this.tileRectangle_.east - this.tileRectangle_.west) / this.tileWidth;
                    return this.rasterizeFeatures(features, this.styleFunction_, resolution);
                });
                this.tileCache.set(cacheKey, promise);
                if (this.tileCache.getCount() > 2 * this.tileCache.highWaterMark) {
                    while (this.tileCache.canExpireCache()) {
                        this.tileCache.pop();
                    }
                }
            }
            return promise;
        }
        catch (e) {
            console.trace(e);
            // FIXME: open PR on Cesium to fix incorrect typing
            // @ts-ignore
            this.errorEvent.raiseEvent('could not render pbf to tile', e);
        }
    }
    rasterizeFeatures(features, styleFunction, resolution) {
        const canvas = document.createElement('canvas');
        const vectorContext = toContext(canvas.getContext('2d'), { size: [this.tileWidth, this.tileHeight] });
        features.forEach((f) => {
            const styles = styleFunction(f, resolution);
            if (styles) {
                if (Array.isArray(styles)) {
                    styles.forEach((style) => {
                        vectorContext.setStyle(style);
                        vectorContext.drawGeometry(f);
                    });
                }
                else {
                    vectorContext.setStyle(styles);
                    vectorContext.drawGeometry(f);
                }
            }
        });
        return canvas;
    }
}
//# sourceMappingURL=data:application/json;base64,